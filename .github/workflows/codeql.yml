name: "CodeQL Advanced"

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]
  schedule:
    - cron: '30 7 * * 6'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: csharp
          build-mode: manual

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Create comprehensive C# stubs
      run: |
        # Create directory structure
        mkdir -p /tmp/vintage-story/Lib
        mkdir -p /tmp/vintage-story/Mods
        mkdir -p /tmp/stubs
        
        # Create comprehensive stub project
        cat > /tmp/stubs/Stubs.csproj << 'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net8.0</TargetFramework>
            <OutputType>Library</OutputType>
            <AssemblyName>VintagestoryAPI</AssemblyName>
          </PropertyGroup>
        </Project>
        EOF
        
        # Create comprehensive Vintage Story stubs
        cat > /tmp/stubs/VintagestoryAPI.cs << 'EOF'
        using System;
        using System.Collections.Generic;
        
        namespace Vintagestory.API.Common {
            public interface ICoreAPI { }
            public interface ICoreClientAPI : ICoreAPI { }
            public interface ICoreServerAPI : ICoreAPI { }
            public enum EnumAppSide { Client, Server }
            public class ModSystem { }
            
            public class EntityPlayer {
                public string PlayerUID { get; set; }
                public string PlayerName { get; set; }
            }
            
            public class Entity {
                public string EntityUID { get; set; }
            }
            
            public class BlockPos {
                public int X { get; set; }
                public int Y { get; set; }
                public int Z { get; set; }
            }
            
            public class Vec3d {
                public double X { get; set; }
                public double Y { get; set; }
                public double Z { get; set; }
            }
            
            public class Vec3f {
                public float X { get; set; }
                public float Y { get; set; }
                public float Z { get; set; }
            }
        }
        
        namespace Vintagestory.API.Client {
            public interface ICoreClientAPI : ICoreAPI { }
            public class ClientMain { }
            public class ClientWorldAccess { }
        }
        
        namespace Vintagestory.API {
            public static class MathTools {
                public static double Distance(double x1, double y1, double z1, double x2, double y2, double z2) => 0;
                public static float Distance(float x1, float y1, float z1, float x2, float y2, float z2) => 0;
            }
            
            public static class Util {
                public static string ToString(object obj) => obj?.ToString() ?? "";
                public static int GetHashCode(object obj) => obj?.GetHashCode() ?? 0;
            }
        }
        
        namespace Vintagestory.API.Config {
            public class RuntimeEnv {
                public static OS OS => OS.Windows;
            }
            public enum OS { Windows, Linux, Mac }
        }
        EOF
        
        # Compile comprehensive stubs
        cd /tmp/stubs
        dotnet build -c Release -o /tmp/vintage-story/Lib/
        
        # Copy to all required locations
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/VintagestoryAPI.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/VintagestoryLib.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Mods/VSSurvivalMod.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Mods/VSEssentials.dll
        
        # Create other required DLLs
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/OpenTK.Audio.OpenAL.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/OpenTK.Mathematics.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/cairo-sharp.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/Open.Nat.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/Newtonsoft.Json.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/0Harmony.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/protobuf-net.dll
        cp /tmp/vintage-story/Lib/VintagestoryAPI.dll /tmp/vintage-story/Lib/Microsoft.Data.Sqlite.dll

    - name: Restore NuGet packages
      run: dotnet restore
      env:
        VINTAGE_STORY: /tmp/vintage-story

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Build with CodeQL
      run: |
        dotnet build --no-restore --configuration Release
      env:
        VINTAGE_STORY: /tmp/vintage-story

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:${{matrix.language}}"
